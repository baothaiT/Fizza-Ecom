// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Thinh_Ecom.Data;

namespace Thinh_Ecom.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "f49e4348-718f-43e3-b1f6-6dc89c5Bb5ff",
                            RoleId = "f49e4348-718f-43e3-b1f6-6dc89c5Bb4fd"
                        },
                        new
                        {
                            UserId = "DE544998-A3CC-4E12-ABB4-0642E57BD222",
                            RoleId = "360E601E-92F2-4F08-832B-604A21293258"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.About", b =>
                {
                    b.Property<int>("about_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("about_AppUserFK")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("about_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("about_Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("about_Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("about_id");

                    b.HasIndex("about_AppUserFK");

                    b.ToTable("About");

                    b.HasData(
                        new
                        {
                            about_id = 1,
                            about_Description = "The Big Oxmox advised her not to do so, because there were thousands of bad Commas, wild Question Marks and devious Semikoli, but the Little Blind Text didn’t listen. She packed her seven versalia, put her initial into the belt and made herself on the way. \n \n When she reached the first hills of the Italic Mountains, she had a last view back on the skyline of her hometown Bookmarksgrove,the headline of Alphabet Village and the subline of her own road,the Line Lane.Pityful a rethoric question ran over her cheek,then she continued her way.",
                            about_Title = "Footwear the leading eCommerce Store around the Globe",
                            about_Url = "https://www.youtube.com/watch?v=F1vcruph8JA"
                        });
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Bills", b =>
                {
                    b.Property<string>("bill_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("bill_Cancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("bill_Confirmation")
                        .HasColumnType("bit");

                    b.Property<DateTime>("bill_DatetimeOrder")
                        .HasColumnType("datetime2");

                    b.Property<bool>("bill_Delivered")
                        .HasColumnType("bit");

                    b.Property<bool>("bill_Delivering")
                        .HasColumnType("bit");

                    b.Property<int>("bill_Discount")
                        .HasColumnType("int");

                    b.Property<bool>("bill_HideStatus")
                        .HasColumnType("bit");

                    b.Property<string>("bill_Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("bill_PaidTotal")
                        .HasColumnType("int");

                    b.Property<string>("bill_PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_ProductIdlist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_ProductNamelist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_ProductPricelist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_ProductSizelist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_Quantity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("bill_Shipping")
                        .HasColumnType("int");

                    b.Property<string>("bill_UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("bill_WaitForConfirmation")
                        .HasColumnType("bit");

                    b.Property<bool>("bill_WaitPickup")
                        .HasColumnType("bit");

                    b.HasKey("bill_Id");

                    b.HasIndex("bill_UserId");

                    b.ToTable("Bills");

                    b.HasData(
                        new
                        {
                            bill_Id = "D269BF93-A5E2-4C4A-8146-9967DDE80D30",
                            bill_Cancelled = false,
                            bill_Confirmation = true,
                            bill_DatetimeOrder = new DateTime(2022, 4, 7, 5, 26, 9, 302, DateTimeKind.Local).AddTicks(4703),
                            bill_Delivered = false,
                            bill_Delivering = false,
                            bill_Discount = 0,
                            bill_HideStatus = false,
                            bill_Note = "",
                            bill_PaidTotal = 2000,
                            bill_PaymentMethod = "Check Payment",
                            bill_ProductIdlist = "1|2|3|4",
                            bill_ProductNamelist = "product 1|product 2| product 3| product 4",
                            bill_ProductPricelist = "550|450|350|640",
                            bill_ProductSizelist = "7|8|9|14",
                            bill_Quantity = "1|1|2|1",
                            bill_Shipping = 10,
                            bill_UserId = "f49e4348-718f-43e3-b1f6-6dc89c5Bb5ff",
                            bill_WaitForConfirmation = false,
                            bill_WaitPickup = false
                        });
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Cart", b =>
                {
                    b.Property<string>("cart_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("cart_UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("cart_Id");

                    b.HasIndex("cart_UserID");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            cart_Id = "72309286-ECBB-4D20-AD95-2819D31E3400",
                            cart_UserID = "f49e4348-718f-43e3-b1f6-6dc89c5Bb5ff"
                        },
                        new
                        {
                            cart_Id = "D355458F-1DD3-4834-AA28-6DA34B6357FF",
                            cart_UserID = "DE544998-A3CC-4E12-ABB4-0642E57BD222"
                        });
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.CartsDevice", b =>
                {
                    b.Property<string>("cartd_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("cartd_DeviceId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("cartd_Id");

                    b.HasIndex("cartd_DeviceId");

                    b.ToTable("CartsDevice");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Categories", b =>
                {
                    b.Property<string>("cg_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("cg_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cg_Sale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cg_Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("cg_Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            cg_Id = "89b799fd-89ee-45ce-b803-f4f87a6b9b61",
                            cg_Name = "Pizza",
                            cg_Sale = "",
                            cg_Type = ""
                        },
                        new
                        {
                            cg_Id = "ceef6e1d-5ff9-4992-a7f8-cc90656b8e78",
                            cg_Name = "Spaghetti",
                            cg_Sale = "",
                            cg_Type = ""
                        },
                        new
                        {
                            cg_Id = "4bce01c4-3313-49f1-8bc8-c54d95366513",
                            cg_Name = "Sidedishes",
                            cg_Sale = "",
                            cg_Type = ""
                        },
                        new
                        {
                            cg_Id = "805b7f02-cf9a-4af1-a533-42f9a2c9a4a7",
                            cg_Name = "Drink",
                            cg_Sale = "",
                            cg_Type = ""
                        });
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Comment", b =>
                {
                    b.Property<string>("Comment_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment_Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Comment_HideStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Comment_ReviewType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Comment_UploadTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comment_UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Comment_id");

                    b.HasIndex("Comment_UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.CommentInproduct", b =>
                {
                    b.Property<string>("rip_ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("rip_ReviewId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("rip_ProductId", "rip_ReviewId");

                    b.HasIndex("rip_ReviewId");

                    b.ToTable("ReviewInproduct");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.ContactForm", b =>
                {
                    b.Property<string>("cf_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("cf_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cf_Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cf_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cf_Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cf_Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("cf_Id");

                    b.ToTable("ContactUsers");

                    b.HasData(
                        new
                        {
                            cf_Id = "e56ab218-02b1-42fa-8c37-96e208ead92f",
                            cf_Description = "Description",
                            cf_Email = "Email",
                            cf_Name = "Name",
                            cf_Phone = "0123456789",
                            cf_Subject = "Subject"
                        });
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Coupons", b =>
                {
                    b.Property<string>("couponId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("couponCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("couponPrice")
                        .HasColumnType("int");

                    b.Property<string>("coupon_AppUserFK")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("couponId");

                    b.HasIndex("coupon_AppUserFK");

                    b.ToTable("Coupons");

                    b.HasData(
                        new
                        {
                            couponId = "6fb0b6ab-0f11-4430-98f1-8546cd110afe",
                            EndTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            couponCode = "code10",
                            couponPrice = 10
                        },
                        new
                        {
                            couponId = "03e04bb0-9a6c-45dc-9816-1ab62645cad0",
                            EndTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            couponCode = "code50",
                            couponPrice = 50
                        });
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.DeviceInfo", b =>
                {
                    b.Property<string>("deviceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("deviceAddress1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deviceAddress2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deviceCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deviceCompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deviceCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deviceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("devicePhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("devicePostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deviceState")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("deviceId");

                    b.ToTable("Device");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.ProductInCart", b =>
                {
                    b.Property<string>("pic_CartId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("pic_ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("pic_amount")
                        .HasColumnType("int");

                    b.Property<string>("pic_color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pic_size")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("pic_CartId", "pic_ProductId");

                    b.HasIndex("pic_ProductId");

                    b.ToTable("ProductInCart");

                    b.HasData(
                        new
                        {
                            pic_CartId = "D355458F-1DD3-4834-AA28-6DA34B6357FF",
                            pic_ProductId = "30ae57c0-fa17-4593-8c0b-9dfead70e397",
                            pic_amount = 2
                        });
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.ProductInCartDevices", b =>
                {
                    b.Property<string>("picd_CartId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("picd_ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("picd_amount")
                        .HasColumnType("int");

                    b.Property<string>("picd_color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("picd_size")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("picd_CartId", "picd_ProductId");

                    b.HasIndex("picd_ProductId");

                    b.ToTable("ProductInCartDevices");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Products", b =>
                {
                    b.Property<string>("pd_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoriesFK")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("pd_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pd_Img1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pd_Img2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pd_Img3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pd_Img4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pd_MenuFacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pd_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pd_NameImg1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pd_NameImg2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pd_NameImg3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pd_NameImg4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("pd_Price")
                        .HasColumnType("int");

                    b.Property<int>("pd_Rate")
                        .HasColumnType("int");

                    b.Property<int>("pd_ReducePrice")
                        .HasColumnType("int");

                    b.Property<string>("pd_ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pd_Size")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("pd_Id");

                    b.HasIndex("CategoriesFK");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            pd_Id = "30ae57c0-fa17-4593-8c0b-9dfead70e397",
                            CategoriesFK = "89b799fd-89ee-45ce-b803-f4f87a6b9b61",
                            pd_Description = "pizza-bo",
                            pd_Img1 = "/img/pizza-300x300/pizza-bo.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "Pizza",
                            pd_Price = 10,
                            pd_Rate = 5,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "3345f7a6-ee6f-4f2f-8fb9-c1fb63f9aaac",
                            CategoriesFK = "89b799fd-89ee-45ce-b803-f4f87a6b9b61",
                            pd_Description = "coca-zero",
                            pd_Img1 = "/img/pizza-300x300/coca-zero.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "Cocacola Zero",
                            pd_Price = 10,
                            pd_Rate = 5,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "388af5b7-1558-4001-a237-611edd60b2a0",
                            CategoriesFK = "89b799fd-89ee-45ce-b803-f4f87a6b9b61",
                            pd_Description = "Extravaganza",
                            pd_Img1 = "/img/pizza-300x300/Extravaganza.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "Extravaganza",
                            pd_Price = 10,
                            pd_Rate = 5,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "e8e47b5a-c595-4fa6-8489-75ef927f9f3c",
                            CategoriesFK = "89b799fd-89ee-45ce-b803-f4f87a6b9b61",
                            pd_Description = "pfanta-15",
                            pd_Img1 = "/img/pizza-300x300/fanta-15.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "fanta-1.5L",
                            pd_Price = 10,
                            pd_Rate = 5,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "c95f8967-d319-43fb-9b1c-58809c5f8e71",
                            CategoriesFK = "ceef6e1d-5ff9-4992-a7f8-cc90656b8e78",
                            pd_Description = "Haft-haft",
                            pd_Img1 = "/img/pizza-300x300/Haft-haft.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "Haft-haft",
                            pd_Price = 10,
                            pd_Rate = 5,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "55c9e49b-785b-4a2a-a905-f4a3a0f33f3b",
                            CategoriesFK = "ceef6e1d-5ff9-4992-a7f8-cc90656b8e78",
                            pd_Description = "Meat-lover",
                            pd_Img1 = "/img/pizza-300x300/Meat-lover.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "Meat-lover",
                            pd_Price = 10,
                            pd_Rate = 5,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "6e54d7e0-8b44-4962-abbb-d6febe26d056",
                            CategoriesFK = "4bce01c4-3313-49f1-8bc8-c54d95366513",
                            pd_Description = "MENU-PC",
                            pd_Img1 = "/img/pizza-300x300/MENU-PC.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "MENU-PC",
                            pd_Price = 10,
                            pd_Rate = 5,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "ce2b460c-16fe-4468-81f9-ce0dfd38f7db",
                            CategoriesFK = "89b799fd-89ee-45ce-b803-f4f87a6b9b61",
                            pd_Description = "MENU-PC-BBQ",
                            pd_Img1 = "/img/pizza-300x300/MENU-PC-BBQ.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "MENU-PC-BBQ",
                            pd_Price = 10,
                            pd_Rate = 5,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "96cb5989-6229-4e4c-b065-cd53e69b3e76",
                            CategoriesFK = "89b799fd-89ee-45ce-b803-f4f87a6b9b61",
                            pd_Description = "MENU-PC-my",
                            pd_Img1 = "/img/pizza-300x300/MENU-PC-my.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "MENU-PC-my",
                            pd_Price = 10,
                            pd_Rate = 5,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "a65ba8bf-35aa-488e-9472-f347e9ca538d",
                            CategoriesFK = "89b799fd-89ee-45ce-b803-f4f87a6b9b61",
                            pd_Description = "MENU-PC-Pho-Mai",
                            pd_Img1 = "/img/pizza-300x300/MENU-PC-Pho-Mai.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "MENU-PC-Pho-Mai",
                            pd_Price = 10,
                            pd_Rate = 5,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "678bda1a-3275-44dc-9d75-281a075b28cf",
                            CategoriesFK = "89b799fd-89ee-45ce-b803-f4f87a6b9b61",
                            pd_Description = "Ocean-mania",
                            pd_Img1 = "/img/pizza-300x300/Ocean-mania.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "Ocean-mania",
                            pd_Price = 10,
                            pd_Rate = 5,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "08d481bf-82e2-493f-abdc-963efd4e513e",
                            CategoriesFK = "89b799fd-89ee-45ce-b803-f4f87a6b9b61",
                            pd_Description = "Okonomiyaki",
                            pd_Img1 = "/img/pizza-300x300/Okonomiyaki.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "Okonomiyaki",
                            pd_Price = 10,
                            pd_Rate = 5,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "f5934811-4d3d-4c90-bbd4-fa9ecca478bc",
                            CategoriesFK = "89b799fd-89ee-45ce-b803-f4f87a6b9b61",
                            pd_Description = "pasta-bo-bam",
                            pd_Img1 = "/img/pizza-300x300/pasta-bo-bam.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "pasta",
                            pd_Price = 10,
                            pd_Rate = 5,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "d30973e5-b046-40ac-919a-710b609df8d9",
                            CategoriesFK = "89b799fd-89ee-45ce-b803-f4f87a6b9b61",
                            pd_Description = "pasta-hai-san",
                            pd_Img1 = "/img/pizza-300x300/pasta-hai-san.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "pasta-hai-san",
                            pd_Price = 10,
                            pd_Rate = 5,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "519d2aa4-4bba-468d-afef-7905f370fe82",
                            CategoriesFK = "89b799fd-89ee-45ce-b803-f4f87a6b9b61",
                            pd_Description = "pasta-rau-cu",
                            pd_Img1 = "/img/pizza-300x300/pasta-rau-cu.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "pasta-rau-cu",
                            pd_Price = 10,
                            pd_Rate = 5,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "6d74282e-010a-4b64-b8ee-184a5f2c556c",
                            CategoriesFK = "ceef6e1d-5ff9-4992-a7f8-cc90656b8e78",
                            pd_Description = "pizza-bo",
                            pd_Img1 = "/img/pizza-300x300/pizza-bo.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "pizza-bo",
                            pd_Price = 10,
                            pd_Rate = 5,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "2c26047f-a2e9-4b79-9cad-adb28a7058e1",
                            CategoriesFK = "4bce01c4-3313-49f1-8bc8-c54d95366513",
                            pd_Description = "Pizzaminsea",
                            pd_Img1 = "/img/pizza-300x300/Pizzaminsea.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "Pizzaminsea",
                            pd_Price = 10,
                            pd_Rate = 5,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "e387e71c-e433-43d5-99bc-00747b13c850",
                            CategoriesFK = "805b7f02-cf9a-4af1-a533-42f9a2c9a4a7",
                            pd_Description = "Sprite-15L",
                            pd_Img1 = "/img/pizza-300x300/Sprite-15L.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "Sprite-15L",
                            pd_Price = 10,
                            pd_Rate = 5,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "",
                            pd_Size = ""
                        });
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Shipping", b =>
                {
                    b.Property<string>("ship_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ship_AppUserFK")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ship_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ship_Price")
                        .HasColumnType("int");

                    b.HasKey("ship_Id");

                    b.HasIndex("ship_AppUserFK");

                    b.ToTable("Shipping");

                    b.HasData(
                        new
                        {
                            ship_Id = "7CF94A7D-9239-446E-A404-086518F84652",
                            ship_Name = "Ship",
                            ship_Price = 5
                        });
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.SystemContact", b =>
                {
                    b.Property<int>("Contact_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Contact_Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact_AppUserFK")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Contact_Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact_Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact_Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Contact_Id");

                    b.HasIndex("Contact_AppUserFK");

                    b.ToTable("ContactSystems");

                    b.HasData(
                        new
                        {
                            Contact_Id = 1,
                            Contact_Address = " 123, An Lac A Ward, Binh Tan District, HCM",
                            Contact_Email = "admin@gmail.com",
                            Contact_Phone = "0123456789",
                            Contact_Website = "https://shoes.com"
                        });
                });

            modelBuilder.Entity("Thinh_Ecom.EntitiesThinh_Ecom.Entities.AppRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("AppRole");

                    b.HasData(
                        new
                        {
                            Id = "f49e4348-718f-43e3-b1f6-6dc89c5Bb4fd",
                            ConcurrencyStamp = "73e7483a-dac0-4e67-af33-8d9cbfde6828",
                            Name = "staff",
                            Description = "Staff"
                        },
                        new
                        {
                            Id = "360E601E-92F2-4F08-832B-604A21293258",
                            ConcurrencyStamp = "bb6228cd-165f-4d46-adf6-263223979e6c",
                            Name = "admin",
                            Description = "admin"
                        });
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("DoB")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_State")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("AppUser");

                    b.HasData(
                        new
                        {
                            Id = "DE544998-A3CC-4E12-ABB4-0642E57BD222",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5dd49c13-db5f-4a78-b51a-74e6a1f917bc",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIb8Zy6keY4jS3GOcv0bgXkiKK6lbmYSglC/quzdDa2/6lJ2Hdjv2secEA+9nqcULQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e8531444-1aa2-49f7-ae67-f0561414f61f",
                            TwoFactorEnabled = false,
                            UserName = "Admin",
                            DoB = new DateTime(2020, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "admin",
                            LastName = "admin"
                        },
                        new
                        {
                            Id = "f49e4348-718f-43e3-b1f6-6dc89c5Bb5ff",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1915b628-e408-4120-811f-2af6ed8d9328",
                            Email = "staff@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STAFF@GMAIL.COM",
                            NormalizedUserName = "STAFF@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBn98r7PevyE6CiVLc3VFp2CIG2sHchT+7uJI8D/AUEQD4k3vOP2mPlzq9ZXyP4UiQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7c209abe-7c5f-47b4-9a16-cac9f193de4d",
                            TwoFactorEnabled = false,
                            UserName = "Staff",
                            DoB = new DateTime(2020, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "staff",
                            LastName = "staff"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.About", b =>
                {
                    b.HasOne("Thinh_Ecom.Entities.AppUser", "AppUser")
                        .WithMany("AboutU")
                        .HasForeignKey("about_AppUserFK");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Bills", b =>
                {
                    b.HasOne("Thinh_Ecom.Entities.AppUser", "AppUserB")
                        .WithMany("BillsAU")
                        .HasForeignKey("bill_UserId");

                    b.Navigation("AppUserB");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Cart", b =>
                {
                    b.HasOne("Thinh_Ecom.Entities.AppUser", "AppUserC")
                        .WithMany("CartU")
                        .HasForeignKey("cart_UserID");

                    b.Navigation("AppUserC");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.CartsDevice", b =>
                {
                    b.HasOne("Thinh_Ecom.Entities.DeviceInfo", "DeviceCD")
                        .WithMany("CartsDeviceD")
                        .HasForeignKey("cartd_DeviceId");

                    b.Navigation("DeviceCD");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Comment", b =>
                {
                    b.HasOne("Thinh_Ecom.Entities.AppUser", "AppUserR")
                        .WithMany("ReviewsU")
                        .HasForeignKey("Comment_UserId");

                    b.Navigation("AppUserR");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.CommentInproduct", b =>
                {
                    b.HasOne("Thinh_Ecom.Entities.Products", "ProductsRIP")
                        .WithMany("ReviewInproductP")
                        .HasForeignKey("rip_ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Thinh_Ecom.Entities.Comment", "ReviewsRIP")
                        .WithMany("ReviewInproductR")
                        .HasForeignKey("rip_ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductsRIP");

                    b.Navigation("ReviewsRIP");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Coupons", b =>
                {
                    b.HasOne("Thinh_Ecom.Entities.AppUser", "AppUser")
                        .WithMany("CouponsU")
                        .HasForeignKey("coupon_AppUserFK");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.ProductInCart", b =>
                {
                    b.HasOne("Thinh_Ecom.Entities.Cart", "CartPICart")
                        .WithMany("ProductInCartC")
                        .HasForeignKey("pic_CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Thinh_Ecom.Entities.Products", "ProductsPICart")
                        .WithMany("ProductInCartP")
                        .HasForeignKey("pic_ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CartPICart");

                    b.Navigation("ProductsPICart");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.ProductInCartDevices", b =>
                {
                    b.HasOne("Thinh_Ecom.Entities.CartsDevice", "CartsDevicePICD")
                        .WithMany("ProductInCartDevicesCD")
                        .HasForeignKey("picd_CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Thinh_Ecom.Entities.Products", "ProductsPICD")
                        .WithMany("ProductInCartDevicesP")
                        .HasForeignKey("picd_ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CartsDevicePICD");

                    b.Navigation("ProductsPICD");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Products", b =>
                {
                    b.HasOne("Thinh_Ecom.Entities.Categories", "Categories")
                        .WithMany("Products")
                        .HasForeignKey("CategoriesFK");

                    b.Navigation("Categories");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Shipping", b =>
                {
                    b.HasOne("Thinh_Ecom.Entities.AppUser", "AppUser")
                        .WithMany("ShippingU")
                        .HasForeignKey("ship_AppUserFK");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.SystemContact", b =>
                {
                    b.HasOne("Thinh_Ecom.Entities.AppUser", "AppUser")
                        .WithMany("SystemContactU")
                        .HasForeignKey("Contact_AppUserFK");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Cart", b =>
                {
                    b.Navigation("ProductInCartC");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.CartsDevice", b =>
                {
                    b.Navigation("ProductInCartDevicesCD");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Categories", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Comment", b =>
                {
                    b.Navigation("ReviewInproductR");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.DeviceInfo", b =>
                {
                    b.Navigation("CartsDeviceD");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Products", b =>
                {
                    b.Navigation("ProductInCartDevicesP");

                    b.Navigation("ProductInCartP");

                    b.Navigation("ReviewInproductP");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.AppUser", b =>
                {
                    b.Navigation("AboutU");

                    b.Navigation("BillsAU");

                    b.Navigation("CartU");

                    b.Navigation("CouponsU");

                    b.Navigation("ReviewsU");

                    b.Navigation("ShippingU");

                    b.Navigation("SystemContactU");
                });
#pragma warning restore 612, 618
        }
    }
}
