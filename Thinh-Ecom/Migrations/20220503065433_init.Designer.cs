// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Thinh_Ecom.Data;

namespace Thinh_Ecom.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220503065433_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "f49e4348-718f-43e3-b1f6-6dc89c5Bb5ff",
                            RoleId = "f49e4348-718f-43e3-b1f6-6dc89c5Bb4fd"
                        },
                        new
                        {
                            UserId = "DE544998-A3CC-4E12-ABB4-0642E57BD222",
                            RoleId = "360E601E-92F2-4F08-832B-604A21293258"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.About", b =>
                {
                    b.Property<int>("about_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("about_AppUserFK")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("about_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("about_Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("about_Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("about_id");

                    b.HasIndex("about_AppUserFK");

                    b.ToTable("About");

                    b.HasData(
                        new
                        {
                            about_id = 1,
                            about_Description = "The Big Oxmox advised her not to do so, because there were thousands of bad Commas, wild Question Marks and devious Semikoli, but the Little Blind Text didn’t listen. She packed her seven versalia, put her initial into the belt and made herself on the way. \n \n When she reached the first hills of the Italic Mountains, she had a last view back on the skyline of her hometown Bookmarksgrove,the headline of Alphabet Village and the subline of her own road,the Line Lane.Pityful a rethoric question ran over her cheek,then she continued her way.",
                            about_Title = "Footwear the leading eCommerce Store around the Globe",
                            about_Url = "https://www.youtube.com/watch?v=F1vcruph8JA"
                        });
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Bills", b =>
                {
                    b.Property<string>("bill_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("bill_Confirmation")
                        .HasColumnType("bit");

                    b.Property<DateTime>("bill_DatetimeOrder")
                        .HasColumnType("datetime2");

                    b.Property<int>("bill_Discount")
                        .HasColumnType("int");

                    b.Property<bool>("bill_HideStatus")
                        .HasColumnType("bit");

                    b.Property<string>("bill_Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("bill_PaidTotal")
                        .HasColumnType("int");

                    b.Property<string>("bill_PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_ProductIdlist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_ProductNamelist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_ProductPricelist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_ProductSizelist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_QuantityList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("bill_Shipping")
                        .HasColumnType("int");

                    b.Property<string>("bill_UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("bill_WaitForConfirmation")
                        .HasColumnType("bit");

                    b.HasKey("bill_Id");

                    b.HasIndex("bill_UserId");

                    b.ToTable("Bills");

                    b.HasData(
                        new
                        {
                            bill_Id = "D269BF93-A5E2-4C4A-8146-9967DDE80D30",
                            IsDelete = false,
                            bill_Confirmation = true,
                            bill_DatetimeOrder = new DateTime(2022, 5, 3, 13, 54, 32, 507, DateTimeKind.Local).AddTicks(679),
                            bill_Discount = 0,
                            bill_HideStatus = false,
                            bill_Note = "",
                            bill_PaidTotal = 2000,
                            bill_PaymentMethod = "Check Payment",
                            bill_ProductIdlist = "ffad228a-b63a-44ac-a7ef-13c3c84944ed|10d6a897-618a-4122-8c32-6ec738d2c0a8|341e1309-4d91-4d73-bde3-8f985fb2d11c|3f0c806d-2699-4b3b-8da1-12bd9e996bf1|",
                            bill_ProductNamelist = "product 1|product 2| product 3| product 4|",
                            bill_ProductPricelist = "550|450|350|640|",
                            bill_ProductSizelist = "7|8|9|14|",
                            bill_QuantityList = "1|1|2|1|",
                            bill_Shipping = 10,
                            bill_UserId = "f49e4348-718f-43e3-b1f6-6dc89c5Bb5ff",
                            bill_WaitForConfirmation = false
                        });
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Cart", b =>
                {
                    b.Property<string>("cart_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("cart_UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("cart_Id");

                    b.HasIndex("cart_UserID");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            cart_Id = "72309286-ECBB-4D20-AD95-2819D31E3400",
                            cart_UserID = "f49e4348-718f-43e3-b1f6-6dc89c5Bb5ff"
                        },
                        new
                        {
                            cart_Id = "D355458F-1DD3-4834-AA28-6DA34B6357FF",
                            cart_UserID = "DE544998-A3CC-4E12-ABB4-0642E57BD222"
                        });
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Categories", b =>
                {
                    b.Property<string>("cg_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("cg_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cg_Sale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cg_Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("cg_Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            cg_Id = "67ae246a-3fe3-419f-b04f-26f7b79a2a0a",
                            IsDelete = false,
                            cg_Name = "Pizza",
                            cg_Sale = "",
                            cg_Type = ""
                        },
                        new
                        {
                            cg_Id = "0c501702-0fe6-4210-b06f-3629b86609cd",
                            IsDelete = false,
                            cg_Name = "Spaghetti",
                            cg_Sale = "",
                            cg_Type = ""
                        },
                        new
                        {
                            cg_Id = "ae258a1c-b66c-4d48-972a-10522ced3cd9",
                            IsDelete = false,
                            cg_Name = "Sidedishes",
                            cg_Sale = "",
                            cg_Type = ""
                        },
                        new
                        {
                            cg_Id = "3ea96dc3-16a2-4e4e-abb2-3e8dee0911d1",
                            IsDelete = false,
                            cg_Name = "Drink",
                            cg_Sale = "",
                            cg_Type = ""
                        });
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.ContactForm", b =>
                {
                    b.Property<string>("cf_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("cf_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cf_Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cf_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cf_Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cf_Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("cf_Id");

                    b.ToTable("ContactUsers");

                    b.HasData(
                        new
                        {
                            cf_Id = "f130c787-f7f9-4f4b-a28a-062e512cf742",
                            cf_Description = "Description",
                            cf_Email = "Email",
                            cf_Name = "Name",
                            cf_Phone = "0123456789",
                            cf_Subject = "Subject"
                        });
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Coupons", b =>
                {
                    b.Property<string>("couponId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("couponCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("couponPrice")
                        .HasColumnType("int");

                    b.Property<string>("coupon_AppUserFK")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("couponId");

                    b.HasIndex("coupon_AppUserFK");

                    b.ToTable("Coupons");

                    b.HasData(
                        new
                        {
                            couponId = "1a8f93b3-0261-4048-b2fa-f00b1083c20d",
                            EndTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            couponCode = "code10",
                            couponPrice = 10
                        },
                        new
                        {
                            couponId = "e380a2f8-1bac-4899-8c5f-e88d247b52c0",
                            EndTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            couponCode = "code50",
                            couponPrice = 50
                        });
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.EmailGuest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmailGuest");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.PriceForSize", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("SizeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PriceForSize");

                    b.HasData(
                        new
                        {
                            Id = "e28375c7-a9d7-42ee-b370-33ac84467beb",
                            Price = 10,
                            SizeName = "M"
                        },
                        new
                        {
                            Id = "eb91064a-74d3-4603-bdcc-b3352a01495f",
                            Price = 15,
                            SizeName = "L"
                        });
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.ProductInCart", b =>
                {
                    b.Property<string>("pic_CartId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("pic_ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("pic_amount")
                        .HasColumnType("int");

                    b.Property<string>("pic_color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pic_size")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("pic_CartId", "pic_ProductId");

                    b.HasIndex("pic_ProductId");

                    b.ToTable("ProductInCart");

                    b.HasData(
                        new
                        {
                            pic_CartId = "D355458F-1DD3-4834-AA28-6DA34B6357FF",
                            pic_ProductId = "ffad228a-b63a-44ac-a7ef-13c3c84944ed",
                            pic_amount = 2
                        });
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Products", b =>
                {
                    b.Property<string>("pd_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoriesFK")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("pd_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pd_Img1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pd_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("pd_Price")
                        .HasColumnType("int");

                    b.Property<int>("pd_ReducePrice")
                        .HasColumnType("int");

                    b.Property<string>("pd_ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pd_Size")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("pd_Id");

                    b.HasIndex("CategoriesFK");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            pd_Id = "ffad228a-b63a-44ac-a7ef-13c3c84944ed",
                            CategoriesFK = "67ae246a-3fe3-419f-b04f-26f7b79a2a0a",
                            IsDelete = false,
                            pd_Description = "Pizza: bo",
                            pd_Img1 = "/img/pizza-300x300/pizza-bo.png",
                            pd_Name = "Pizza",
                            pd_Price = 10,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "short 1",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "10d6a897-618a-4122-8c32-6ec738d2c0a8",
                            CategoriesFK = "3ea96dc3-16a2-4e4e-abb2-3e8dee0911d1",
                            IsDelete = false,
                            pd_Description = "coca-zero",
                            pd_Img1 = "/img/pizza-300x300/coca-zero.png",
                            pd_Name = "Cocacola Zero",
                            pd_Price = 10,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "short 2",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "341e1309-4d91-4d73-bde3-8f985fb2d11c",
                            CategoriesFK = "67ae246a-3fe3-419f-b04f-26f7b79a2a0a",
                            IsDelete = false,
                            pd_Description = "Extravaganza",
                            pd_Img1 = "/img/pizza-300x300/Extravaganza.png",
                            pd_Name = "Extravaganza",
                            pd_Price = 10,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "3f0c806d-2699-4b3b-8da1-12bd9e996bf1",
                            CategoriesFK = "3ea96dc3-16a2-4e4e-abb2-3e8dee0911d1",
                            IsDelete = false,
                            pd_Description = "pfanta-15",
                            pd_Img1 = "/img/pizza-300x300/fanta-15.png",
                            pd_Name = "fanta-1.5L",
                            pd_Price = 10,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "short 3",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "95671d5d-74cc-4f00-b051-0922e882cacc",
                            CategoriesFK = "67ae246a-3fe3-419f-b04f-26f7b79a2a0a",
                            IsDelete = false,
                            pd_Description = "Haft-haft",
                            pd_Img1 = "/img/pizza-300x300/Haft-haft.png",
                            pd_Name = "Haft-haft",
                            pd_Price = 10,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "e6f45e14-48f6-413e-abda-12352704c0ce",
                            CategoriesFK = "67ae246a-3fe3-419f-b04f-26f7b79a2a0a",
                            IsDelete = false,
                            pd_Description = "Meat-lover",
                            pd_Img1 = "/img/pizza-300x300/Meat-lover.png",
                            pd_Name = "Meat-lover",
                            pd_Price = 10,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "4809d06f-91cb-48b0-a55c-257be773de9a",
                            CategoriesFK = "ae258a1c-b66c-4d48-972a-10522ced3cd9",
                            IsDelete = false,
                            pd_Description = "MENU-PC",
                            pd_Img1 = "/img/pizza-300x300/MENU-PC.png",
                            pd_Name = "MENU-PC",
                            pd_Price = 10,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "90797f5c-958d-4aab-9f53-bfc0bd556fc6",
                            CategoriesFK = "ae258a1c-b66c-4d48-972a-10522ced3cd9",
                            IsDelete = false,
                            pd_Description = "MENU-PC-BBQ",
                            pd_Img1 = "/img/pizza-300x300/MENU-PC-BBQ.png",
                            pd_Name = "MENU-PC-BBQ",
                            pd_Price = 10,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "602cb206-0c5b-475a-8c15-c1f2f87c114a",
                            CategoriesFK = "ae258a1c-b66c-4d48-972a-10522ced3cd9",
                            IsDelete = false,
                            pd_Description = "MENU-PC-my",
                            pd_Img1 = "/img/pizza-300x300/MENU-PC-my.png",
                            pd_Name = "MENU-PC-my",
                            pd_Price = 10,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "c3a8453b-2154-4e28-ba20-0fa76878ad35",
                            CategoriesFK = "ae258a1c-b66c-4d48-972a-10522ced3cd9",
                            IsDelete = false,
                            pd_Description = "MENU-PC-Pho-Mai",
                            pd_Img1 = "/img/pizza-300x300/MENU-PC-Pho-Mai.png",
                            pd_Name = "MENU-PC-Pho-Mai",
                            pd_Price = 10,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "0f60c399-c5be-4e51-b9f5-b0e1d3bd92fd",
                            CategoriesFK = "67ae246a-3fe3-419f-b04f-26f7b79a2a0a",
                            IsDelete = false,
                            pd_Description = "Ocean-mania",
                            pd_Img1 = "/img/pizza-300x300/Ocean-mania.png",
                            pd_Name = "Ocean-mania",
                            pd_Price = 10,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "aa5b4fdd-1b12-424f-8986-3e3fbb56d4a7",
                            CategoriesFK = "67ae246a-3fe3-419f-b04f-26f7b79a2a0a",
                            IsDelete = false,
                            pd_Description = "Okonomiyaki",
                            pd_Img1 = "/img/pizza-300x300/Okonomiyaki.png",
                            pd_Name = "Okonomiyaki",
                            pd_Price = 10,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "93940b6c-b19f-4a15-b142-0b4841671351",
                            CategoriesFK = "0c501702-0fe6-4210-b06f-3629b86609cd",
                            IsDelete = false,
                            pd_Description = "pasta-bo-bam",
                            pd_Img1 = "/img/pizza-300x300/pasta-bo-bam.png",
                            pd_Name = "pasta",
                            pd_Price = 10,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "312da3cf-72b0-4d01-a00e-c26a1d8b6740",
                            CategoriesFK = "0c501702-0fe6-4210-b06f-3629b86609cd",
                            IsDelete = false,
                            pd_Description = "pasta-hai-san",
                            pd_Img1 = "/img/pizza-300x300/pasta-hai-san.png",
                            pd_Name = "pasta-hai-san",
                            pd_Price = 10,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "604fdfca-cdfd-4335-9684-b0f3549467e9",
                            CategoriesFK = "0c501702-0fe6-4210-b06f-3629b86609cd",
                            IsDelete = false,
                            pd_Description = "pasta-rau-cu",
                            pd_Img1 = "/img/pizza-300x300/pasta-rau-cu.png",
                            pd_Name = "pasta-rau-cu",
                            pd_Price = 10,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "db699ba9-5bb2-4865-8af4-52209243bfb0",
                            CategoriesFK = "67ae246a-3fe3-419f-b04f-26f7b79a2a0a",
                            IsDelete = false,
                            pd_Description = "pizza-bo",
                            pd_Img1 = "/img/pizza-300x300/pizza-bo.png",
                            pd_Name = "pizza-bo",
                            pd_Price = 10,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "16fb850f-c67c-437a-9754-fd0871c3f4dc",
                            CategoriesFK = "67ae246a-3fe3-419f-b04f-26f7b79a2a0a",
                            IsDelete = false,
                            pd_Description = "Pizzaminsea",
                            pd_Img1 = "/img/pizza-300x300/Pizzaminsea.png",
                            pd_Name = "Pizzaminsea",
                            pd_Price = 10,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "17336201-98cf-4040-9e98-70474c63ad46",
                            CategoriesFK = "3ea96dc3-16a2-4e4e-abb2-3e8dee0911d1",
                            IsDelete = false,
                            pd_Description = "Sprite-15L",
                            pd_Img1 = "/img/pizza-300x300/Sprite-15L.png",
                            pd_Name = "Sprite-15L",
                            pd_Price = 10,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "",
                            pd_Size = ""
                        });
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Shipping", b =>
                {
                    b.Property<string>("ship_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ship_AppUserFK")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ship_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ship_Price")
                        .HasColumnType("int");

                    b.HasKey("ship_Id");

                    b.HasIndex("ship_AppUserFK");

                    b.ToTable("Shipping");

                    b.HasData(
                        new
                        {
                            ship_Id = "7CF94A7D-9239-446E-A404-086518F84652",
                            ship_Name = "Ship",
                            ship_Price = 5
                        });
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.SystemContact", b =>
                {
                    b.Property<int>("Contact_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Contact_Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact_AppUserFK")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Contact_Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact_Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact_Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Contact_Id");

                    b.HasIndex("Contact_AppUserFK");

                    b.ToTable("ContactSystems");

                    b.HasData(
                        new
                        {
                            Contact_Id = 1,
                            Contact_Address = " 123, An Lac A Ward, Binh Tan District, HCM",
                            Contact_Email = "admin@gmail.com",
                            Contact_Phone = "0123456789",
                            Contact_Website = "https://shoes.com"
                        });
                });

            modelBuilder.Entity("Thinh_Ecom.EntitiesThinh_Ecom.Entities.AppRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("AppRole");

                    b.HasData(
                        new
                        {
                            Id = "f49e4348-718f-43e3-b1f6-6dc89c5Bb4fd",
                            ConcurrencyStamp = "8b167ace-50eb-44a8-83c5-193384594cce",
                            Name = "Staff",
                            NormalizedName = "Staff",
                            Description = "Staff",
                            IsDelete = false
                        },
                        new
                        {
                            Id = "360E601E-92F2-4F08-832B-604A21293258",
                            ConcurrencyStamp = "d1b3817c-e820-49b6-a139-ad9de400b33b",
                            Name = "Admin",
                            NormalizedName = "Admin",
                            Description = "admin",
                            IsDelete = false
                        });
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("DoB")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_State")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("AppUser");

                    b.HasData(
                        new
                        {
                            Id = "DE544998-A3CC-4E12-ABB4-0642E57BD222",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "77a3cc92-191f-4681-9ff2-a421a91d5610",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEySXm9WKN34TsgO4Bv5IBvYQanP2OUp6ehTHSzJaWQS+s72QhG/N6WFDeCefDpTPw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0a61e370-0b5f-41d5-b4b3-68a68a17ea26",
                            TwoFactorEnabled = false,
                            UserName = "Admin",
                            DoB = new DateTime(2020, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "admin",
                            IsDelete = false,
                            LastName = "admin"
                        },
                        new
                        {
                            Id = "f49e4348-718f-43e3-b1f6-6dc89c5Bb5ff",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7bb64797-0ac6-40ea-8e09-bb8a451f5234",
                            Email = "staff@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STAFF@GMAIL.COM",
                            NormalizedUserName = "STAFF@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENsLYN7vBIMoNmUBuX+8vEGp5T32KHe3fb953GadUrlnCyNTczR024A6QooMDjyWxg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4ddf3eb6-777f-402d-b3e4-d9c15be853e3",
                            TwoFactorEnabled = false,
                            UserName = "Staff",
                            DoB = new DateTime(2020, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "staff",
                            IsDelete = false,
                            LastName = "staff"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.About", b =>
                {
                    b.HasOne("Thinh_Ecom.Entities.AppUser", "AppUser")
                        .WithMany("AboutU")
                        .HasForeignKey("about_AppUserFK");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Bills", b =>
                {
                    b.HasOne("Thinh_Ecom.Entities.AppUser", "AppUserB")
                        .WithMany("BillsAU")
                        .HasForeignKey("bill_UserId");

                    b.Navigation("AppUserB");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Cart", b =>
                {
                    b.HasOne("Thinh_Ecom.Entities.AppUser", "AppUserC")
                        .WithMany("CartU")
                        .HasForeignKey("cart_UserID");

                    b.Navigation("AppUserC");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Coupons", b =>
                {
                    b.HasOne("Thinh_Ecom.Entities.AppUser", "AppUser")
                        .WithMany("CouponsU")
                        .HasForeignKey("coupon_AppUserFK");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.ProductInCart", b =>
                {
                    b.HasOne("Thinh_Ecom.Entities.Cart", "CartPICart")
                        .WithMany("ProductInCartC")
                        .HasForeignKey("pic_CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Thinh_Ecom.Entities.Products", "ProductsPICart")
                        .WithMany("ProductInCartP")
                        .HasForeignKey("pic_ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CartPICart");

                    b.Navigation("ProductsPICart");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Products", b =>
                {
                    b.HasOne("Thinh_Ecom.Entities.Categories", "Categories")
                        .WithMany("Products")
                        .HasForeignKey("CategoriesFK");

                    b.Navigation("Categories");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Shipping", b =>
                {
                    b.HasOne("Thinh_Ecom.Entities.AppUser", "AppUser")
                        .WithMany("ShippingU")
                        .HasForeignKey("ship_AppUserFK");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.SystemContact", b =>
                {
                    b.HasOne("Thinh_Ecom.Entities.AppUser", "AppUser")
                        .WithMany("SystemContactU")
                        .HasForeignKey("Contact_AppUserFK");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Cart", b =>
                {
                    b.Navigation("ProductInCartC");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Categories", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Products", b =>
                {
                    b.Navigation("ProductInCartP");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.AppUser", b =>
                {
                    b.Navigation("AboutU");

                    b.Navigation("BillsAU");

                    b.Navigation("CartU");

                    b.Navigation("CouponsU");

                    b.Navigation("ShippingU");

                    b.Navigation("SystemContactU");
                });
#pragma warning restore 612, 618
        }
    }
}
